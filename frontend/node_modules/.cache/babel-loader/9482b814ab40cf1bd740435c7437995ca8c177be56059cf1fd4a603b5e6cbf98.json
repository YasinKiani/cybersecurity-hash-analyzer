{"ast":null,"code":"// This file manages configuration settings for the frontend application\n\n// Function to determine the API base URL\nconst determineApiBaseUrl = () => {\n  // Check if we're in development or production\n  if (process.env.NODE_ENV === \"development\") {\n    // Try connecting to multiple ports, starting with 5000\n    return \"http://localhost:5000\";\n  } else {\n    // For production, you might use a different URL\n    return process.env.REACT_APP_API_URL || \"http://localhost:5000\";\n  }\n};\n\n// Export the API base URL\nexport const API_BASE_URL = determineApiBaseUrl();\n\n// Helper function to check if backend is available\nexport const checkBackendConnection = async () => {\n  try {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 3000);\n    const response = await fetch(`${API_BASE_URL}/`, {\n      signal: controller.signal\n    });\n    clearTimeout(timeoutId);\n    return response.ok;\n  } catch (error) {\n    console.error(\"Backend connection check failed:\", error);\n    return false;\n  }\n};\n\n// Additional configuration settings\nexport const DEFAULT_HASH_ALGORITHM = \"md5\";\nexport const APP_NAME = \"Hash Visualization\";\nexport const AUTHOR = \"Yasin Kiani\";","map":{"version":3,"names":["determineApiBaseUrl","process","env","NODE_ENV","REACT_APP_API_URL","API_BASE_URL","checkBackendConnection","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","signal","clearTimeout","ok","error","console","DEFAULT_HASH_ALGORITHM","APP_NAME","AUTHOR"],"sources":["C:/Users/YASIN/Desktop/New folder (19)/frontend/src/config.js"],"sourcesContent":["// This file manages configuration settings for the frontend application\r\n\r\n// Function to determine the API base URL\r\nconst determineApiBaseUrl = () => {\r\n  // Check if we're in development or production\r\n  if (process.env.NODE_ENV === \"development\") {\r\n    // Try connecting to multiple ports, starting with 5000\r\n    return \"http://localhost:5000\";\r\n  } else {\r\n    // For production, you might use a different URL\r\n    return process.env.REACT_APP_API_URL || \"http://localhost:5000\";\r\n  }\r\n};\r\n\r\n// Export the API base URL\r\nexport const API_BASE_URL = determineApiBaseUrl();\r\n\r\n// Helper function to check if backend is available\r\nexport const checkBackendConnection = async () => {\r\n  try {\r\n    const controller = new AbortController();\r\n    const timeoutId = setTimeout(() => controller.abort(), 3000);\r\n\r\n    const response = await fetch(`${API_BASE_URL}/`, {\r\n      signal: controller.signal,\r\n    });\r\n\r\n    clearTimeout(timeoutId);\r\n    return response.ok;\r\n  } catch (error) {\r\n    console.error(\"Backend connection check failed:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Additional configuration settings\r\nexport const DEFAULT_HASH_ALGORITHM = \"md5\";\r\nexport const APP_NAME = \"Hash Visualization\";\r\nexport const AUTHOR = \"Yasin Kiani\";\r\n"],"mappings":"AAAA;;AAEA;AACA,MAAMA,mBAAmB,GAAGA,CAAA,KAAM;EAChC;EACA,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;IAC1C;IACA,OAAO,uBAAuB;EAChC,CAAC,MAAM;IACL;IACA,OAAOF,OAAO,CAACC,GAAG,CAACE,iBAAiB,IAAI,uBAAuB;EACjE;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,YAAY,GAAGL,mBAAmB,CAAC,CAAC;;AAEjD;AACA,OAAO,MAAMM,sBAAsB,GAAG,MAAAA,CAAA,KAAY;EAChD,IAAI;IACF,MAAMC,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IACxC,MAAMC,SAAS,GAAGC,UAAU,CAAC,MAAMH,UAAU,CAACI,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC;IAE5D,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,GAAG,EAAE;MAC/CS,MAAM,EAAEP,UAAU,CAACO;IACrB,CAAC,CAAC;IAEFC,YAAY,CAACN,SAAS,CAAC;IACvB,OAAOG,QAAQ,CAACI,EAAE;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAME,sBAAsB,GAAG,KAAK;AAC3C,OAAO,MAAMC,QAAQ,GAAG,oBAAoB;AAC5C,OAAO,MAAMC,MAAM,GAAG,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}