{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\YASIN\\\\Desktop\\\\New folder (19)\\\\frontend\\\\src\\\\components\\\\VisualHash.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"../styles/VisualHash.css\";\nimport { API_BASE_URL } from \"../config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VisualHash = () => {\n  _s();\n  const [hashValue, setHashValue] = useState(\"\");\n  const [visualData, setVisualData] = useState(null);\n  const [identiconData, setIdenticonData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const visualizeHash = async () => {\n    if (!hashValue.trim()) return;\n    setLoading(true);\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/hash/visual`, {\n        hash: hashValue\n      });\n      setVisualData(response.data.data);\n\n      // Simulate the backend identicon generation\n      const hash = hashValue;\n      const size = 5;\n      const grid = Array(size).fill().map(() => Array(size).fill(false));\n\n      // Use first 15 characters of hash\n      for (let i = 0; i < Math.min(hash.length, 15); i++) {\n        const value = parseInt(hash.charAt(i), 16) % 2 === 1;\n        const row = Math.floor(i / 3);\n        const col = i % 3;\n        if (row < size && col < Math.ceil(size / 2)) {\n          grid[row][col] = value;\n          grid[row][size - col - 1] = value;\n        }\n      }\n      const bgcolor = \"#\" + hash.substring(0, 6);\n      setIdenticonData({\n        grid,\n        size,\n        bgcolor,\n        hash\n      });\n    } catch (error) {\n      console.error(\"Error visualizing hash:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Generate a hash if none is provided\n  useEffect(() => {\n    if (!hashValue) {\n      setHashValue(\"5f4dcc3b5aa765d61d8327deb882cf99\"); // Default hash (MD5 of \"password\")\n    }\n  }, [hashValue]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"visual-hash\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Visual Hash\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"See how hash values can be represented visually\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"hashValue\",\n          children: \"Enter a hash value:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"hashValue\",\n          value: hashValue,\n          onChange: e => setHashValue(e.target.value),\n          placeholder: \"Enter MD5, SHA-1, SHA-256 hash...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: visualizeHash,\n        disabled: loading,\n        className: \"btn\",\n        children: loading ? \"Visualizing...\" : \"Visualize Hash\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), visualData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualizations\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualization-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Color Grid Visualization\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"color-grid\",\n          style: {\n            display: \"grid\",\n            gridTemplateColumns: `repeat(${visualData.gridSize}, 1fr)`\n          },\n          children: visualData.colors.map((color, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              backgroundColor: color,\n              width: \"20px\",\n              height: \"20px\"\n            }\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Each cell color is derived from 6 hex characters of the hash\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), identiconData && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"visualization-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Identicon Visualization\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"identicon\",\n          style: {\n            backgroundColor: identiconData.bgcolor + \"22\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"identicon-grid\",\n            style: {\n              display: \"grid\",\n              gridTemplateColumns: `repeat(${identiconData.size}, 1fr)`\n            },\n            children: identiconData.grid.map((row, i) => row.map((cell, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                backgroundColor: cell ? identiconData.bgcolor : \"transparent\",\n                width: \"30px\",\n                height: \"30px\"\n              }\n            }, `${i}-${j}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 23\n            }, this)))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"A symmetrical pattern generated from hash bits\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"About Visual Hashes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Visual representations of hashes help humans recognize and distinguish different hash values. These visual patterns can make it easier to identify when data changes, as even a small change in input results in a completely different hash (and therefore visual pattern).\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Common applications include:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"GitHub-style identicons for user profiles\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Visual verification of cryptographic keys\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Quick integrity checks of downloaded files\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Educational tools for understanding hash functions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(VisualHash, \"fBwWgWOJEajFRhfFVlGVWOLu4so=\");\n_c = VisualHash;\nexport default VisualHash;\nvar _c;\n$RefreshReg$(_c, \"VisualHash\");","map":{"version":3,"names":["React","useState","useEffect","axios","API_BASE_URL","jsxDEV","_jsxDEV","VisualHash","_s","hashValue","setHashValue","visualData","setVisualData","identiconData","setIdenticonData","loading","setLoading","visualizeHash","trim","response","post","hash","data","size","grid","Array","fill","map","i","Math","min","length","value","parseInt","charAt","row","floor","col","ceil","bgcolor","substring","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","onChange","e","target","placeholder","onClick","disabled","style","display","gridTemplateColumns","gridSize","colors","color","index","backgroundColor","width","height","cell","j","_c","$RefreshReg$"],"sources":["C:/Users/YASIN/Desktop/New folder (19)/frontend/src/components/VisualHash.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"../styles/VisualHash.css\";\r\nimport { API_BASE_URL } from \"../config\";\r\n\r\nconst VisualHash = () => {\r\n  const [hashValue, setHashValue] = useState(\"\");\r\n  const [visualData, setVisualData] = useState(null);\r\n  const [identiconData, setIdenticonData] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const visualizeHash = async () => {\r\n    if (!hashValue.trim()) return;\r\n\r\n    setLoading(true);\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/api/hash/visual`, {\r\n        hash: hashValue,\r\n      });\r\n\r\n      setVisualData(response.data.data);\r\n\r\n      // Simulate the backend identicon generation\r\n      const hash = hashValue;\r\n      const size = 5;\r\n      const grid = Array(size)\r\n        .fill()\r\n        .map(() => Array(size).fill(false));\r\n\r\n      // Use first 15 characters of hash\r\n      for (let i = 0; i < Math.min(hash.length, 15); i++) {\r\n        const value = parseInt(hash.charAt(i), 16) % 2 === 1;\r\n        const row = Math.floor(i / 3);\r\n        const col = i % 3;\r\n\r\n        if (row < size && col < Math.ceil(size / 2)) {\r\n          grid[row][col] = value;\r\n          grid[row][size - col - 1] = value;\r\n        }\r\n      }\r\n\r\n      const bgcolor = \"#\" + hash.substring(0, 6);\r\n\r\n      setIdenticonData({\r\n        grid,\r\n        size,\r\n        bgcolor,\r\n        hash,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error visualizing hash:\", error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Generate a hash if none is provided\r\n  useEffect(() => {\r\n    if (!hashValue) {\r\n      setHashValue(\"5f4dcc3b5aa765d61d8327deb882cf99\"); // Default hash (MD5 of \"password\")\r\n    }\r\n  }, [hashValue]);\r\n\r\n  return (\r\n    <div className=\"visual-hash\">\r\n      <h2>Visual Hash</h2>\r\n      <p>See how hash values can be represented visually</p>\r\n\r\n      <div className=\"input-section\">\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"hashValue\">Enter a hash value:</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"hashValue\"\r\n            value={hashValue}\r\n            onChange={(e) => setHashValue(e.target.value)}\r\n            placeholder=\"Enter MD5, SHA-1, SHA-256 hash...\"\r\n          />\r\n        </div>\r\n        <button onClick={visualizeHash} disabled={loading} className=\"btn\">\r\n          {loading ? \"Visualizing...\" : \"Visualize Hash\"}\r\n        </button>\r\n      </div>\r\n\r\n      {visualData && (\r\n        <div className=\"visualizations\">\r\n          <div className=\"visualization-card\">\r\n            <h3>Color Grid Visualization</h3>\r\n            <div\r\n              className=\"color-grid\"\r\n              style={{\r\n                display: \"grid\",\r\n                gridTemplateColumns: `repeat(${visualData.gridSize}, 1fr)`,\r\n              }}\r\n            >\r\n              {visualData.colors.map((color, index) => (\r\n                <div\r\n                  key={index}\r\n                  style={{\r\n                    backgroundColor: color,\r\n                    width: \"20px\",\r\n                    height: \"20px\",\r\n                  }}\r\n                ></div>\r\n              ))}\r\n            </div>\r\n            <p>Each cell color is derived from 6 hex characters of the hash</p>\r\n          </div>\r\n\r\n          {identiconData && (\r\n            <div className=\"visualization-card\">\r\n              <h3>Identicon Visualization</h3>\r\n              <div\r\n                className=\"identicon\"\r\n                style={{ backgroundColor: identiconData.bgcolor + \"22\" }}\r\n              >\r\n                <div\r\n                  className=\"identicon-grid\"\r\n                  style={{\r\n                    display: \"grid\",\r\n                    gridTemplateColumns: `repeat(${identiconData.size}, 1fr)`,\r\n                  }}\r\n                >\r\n                  {identiconData.grid.map((row, i) =>\r\n                    row.map((cell, j) => (\r\n                      <div\r\n                        key={`${i}-${j}`}\r\n                        style={{\r\n                          backgroundColor: cell\r\n                            ? identiconData.bgcolor\r\n                            : \"transparent\",\r\n                          width: \"30px\",\r\n                          height: \"30px\",\r\n                        }}\r\n                      ></div>\r\n                    ))\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <p>A symmetrical pattern generated from hash bits</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"info-section\">\r\n        <h3>About Visual Hashes</h3>\r\n        <p>\r\n          Visual representations of hashes help humans recognize and distinguish\r\n          different hash values. These visual patterns can make it easier to\r\n          identify when data changes, as even a small change in input results in\r\n          a completely different hash (and therefore visual pattern).\r\n        </p>\r\n        <p>Common applications include:</p>\r\n        <ul>\r\n          <li>GitHub-style identicons for user profiles</li>\r\n          <li>Visual verification of cryptographic keys</li>\r\n          <li>Quick integrity checks of downloaded files</li>\r\n          <li>Educational tools for understanding hash functions</li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VisualHash;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}